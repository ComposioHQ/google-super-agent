import { NextRequest, NextResponse } from 'next/server';
import PptxGenJS from 'pptxgenjs';

export async function POST(req: NextRequest) {
  try {
    const { slides, title, userId, style = 'professional' } = await req.json();
    
    // Validate userId is provided
    if (!userId) {
      return NextResponse.json(
        { error: 'Authentication required. Please sign in.' },
        { status: 401 }
      );
    }
    
    // Color schemes matching the HTML slides
    const colorSchemes = {
      professional: {
        primary: '#1a365d',
        secondary: '#2b6cb0',
        accent: '#ed8936',
        background: '667eea', // Using the primary gradient color
        text: 'FFFFFF',
        cardBg: 'FFFFFF',
        cardText: '2d3748'
      },
      creative: {
        primary: '#e53e3e',
        secondary: '#dd6b20',
        accent: '#38a169',
        background: 'ff6b6b', // Using the primary gradient color
        text: 'FFFFFF',
        cardBg: 'FFFFFF',
        cardText: '2d3748'
      },
      minimal: {
        primary: '#000000',
        secondary: '#2d3748',
        accent: '#4299e1',
        background: 'f8f9fa', // Using the primary gradient color
        text: '2d3748',
        cardBg: 'FFFFFF',
        cardText: '2d3748'
      },
      academic: {
        primary: '#2c5282',
        secondary: '#2b6cb0',
        accent: '#d69e2e',
        background: '4a5568', // Using the primary gradient color
        text: 'FFFFFF',
        cardBg: 'FFFFFF',
        cardText: '2d3748'
      }
    };
    
    const colors = colorSchemes[style as keyof typeof colorSchemes] || colorSchemes.professional;
    
    // Create new PowerPoint presentation
    const pptx = new PptxGenJS();
    
    // Set presentation properties
    pptx.author = 'Google Super Agent Powered by Composio';
    pptx.company = 'Generated by AI';
    pptx.title = title || 'AI Generated Presentation';
    
    // Process each slide
    slides.forEach((slide: any, index: number) => {
      const pptxSlide = pptx.addSlide();
      
      if (slide.type === 'title') {
        // Title slide with colored background matching HTML
        pptxSlide.background = { fill: colors.background };
        
        // Main title - larger and more prominent
        pptxSlide.addText(slide.title, {
          x: 0.5,
          y: 2,
          w: 9,
          h: 2.5,
          fontSize: 48,
          bold: true,
          color: colors.text,
          align: 'center',
          fontFace: 'Calibri',
          valign: 'middle'
        });
        
        // Subtitle/content with better styling
        if (slide.content) {
          pptxSlide.addText(slide.content, {
            x: 0.5,
            y: 4.5,
            w: 9,
            h: 1.5,
            fontSize: 20,
            color: colors.text,
            align: 'center',
            fontFace: 'Calibri',
            valign: 'middle'
          });
        }
      } else if (slide.type === 'bullet') {
        // Bullet slide with colored background
        pptxSlide.background = { fill: colors.background };
        
        // Title with better styling
        pptxSlide.addText(slide.title, {
          x: 0.5,
          y: 0.5,
          w: 9,
          h: 1.2,
          fontSize: 36,
          bold: true,
          color: colors.text,
          align: 'center',
          fontFace: 'Calibri',
          valign: 'middle'
        });
        
        // Content card background (white card effect)
        pptxSlide.addShape('rect', {
          x: 1,
          y: 2,
          w: 8,
          h: 4.5,
          fill: { color: colors.cardBg },
          line: { width: 0 },
          shadow: {
            type: 'outer',
            blur: 10,
            offset: 3,
            angle: 45,
            color: '000000',
            opacity: 0.2
          }
        });
        
        // Bullet points with better formatting
        let bulletPoints = slide.bulletPoints;
        if ((!bulletPoints || bulletPoints.length === 0) && slide.content) {
          // Fallback: parse lines starting with • or -
          bulletPoints = slide.content
            .split('\n')
            .map(line => line.trim())
            .filter(line => /^[-•]/.test(line))
            .map(line => line.replace(/^[-•]\s*/, ''));
        }
        if (bulletPoints && bulletPoints.length > 0) {
          bulletPoints.forEach((point: string, i: number) => {
            // Bullet point with accent color
            pptxSlide.addText('•', {
              x: 1.5,
              y: 2.5 + (i * 0.6),
              w: 0.3,
              h: 0.5,
              fontSize: 24,
              color: colors.accent.replace('#', ''),
              align: 'center',
              fontFace: 'Calibri',
              bold: true
            });
            
            // Bullet text
            pptxSlide.addText(point, {
              x: 1.8,
              y: 2.5 + (i * 0.6),
              w: 7,
              h: 0.5,
              fontSize: 16,
              color: colors.cardText,
              align: 'left',
              fontFace: 'Calibri',
              valign: 'middle'
            });
          });
        }
      } else {
        // Content slide with colored background
        pptxSlide.background = { fill: colors.background };
        
        // Title with better styling
        pptxSlide.addText(slide.title, {
          x: 0.5,
          y: 0.5,
          w: 9,
          h: 1.2,
          fontSize: 36,
          bold: true,
          color: colors.text,
          align: 'center',
          fontFace: 'Calibri',
          valign: 'middle'
        });
        
        // Content card background (white card effect)
        pptxSlide.addShape('rect', {
          x: 1,
          y: 2,
          w: 8,
          h: 4.5,
          fill: { color: colors.cardBg },
          line: { width: 0 },
          shadow: {
            type: 'outer',
            blur: 10,
            offset: 3,
            angle: 45,
            color: '000000',
            opacity: 0.2
          }
        });
        
        // Content with better formatting
        if (slide.content) {
          pptxSlide.addText(slide.content, {
            x: 1.5,
            y: 2.5,
            w: 7,
            h: 3.5,
            fontSize: 16,
            color: colors.cardText,
            align: 'left',
            fontFace: 'Calibri',
            valign: 'top',
            lineSpacing: 20
          });
        }
      }
      
      // Add slide number with better styling (except for title slide)
      if (slide.type !== 'title') {
        pptxSlide.addText(`${index + 1}`, {
          x: 9.2,
          y: 7,
          w: 0.6,
          h: 0.4,
          fontSize: 12,
          color: colors.text,
          align: 'center',
          fontFace: 'Calibri',
          valign: 'middle'
        });
      }
    });
    
    // Generate the presentation
    const pptxBuffer = await pptx.write({ outputType: 'arraybuffer' });
    
    return new NextResponse(pptxBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        'Content-Disposition': 'attachment; filename="presentation.pptx"',
      },
    });
  } catch (error) {
    console.error('Error converting to PowerPoint:', error);
    return NextResponse.json(
      { error: 'Failed to convert to PowerPoint' },
      { status: 500 }
    );
  }
} 